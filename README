DBIx::Skinny::DBICTic
========================

DBIx::Class-like features for DBIx::Skinny

INSTALLATION

To install this module type the following:

   perl Makefile.PL
   make
   make test
   make install

NAME
    DBIx::Skinny::DBICTic - dbic-like interface

SYNOPSIS
        package Your::Model::Schema;
        use DBIx::Skinny::Schema;
        use DBIx::Skinny::DBICTic::Schema;
    
        install_table 'user' => schema {
            pk 'id';
            columns qw/
                id name
            /;
        
            # built-in relationship
            has_many 'profiles'
                        => 'user_profile' => 'user.id = user_profile.user_id';
            might_have 'status'
                        => 'user_status'  => 'user.id = user_status.user_id';
        
            # 
            relationship 'a_relation'
                        => 'user_status' => {
                            condition => 'user.id user_status.user_id',
                            type => 'inner',
                        };
        };
    
        install_table 'user_profile' => schema {
            pk 'id';
            columns qw/
                id user_id name value
            /;
        };
    
        install_table 'user_status' => schema {
            pk 'user_id';
            columns qw/
                user_id status
            /;
        };
    
        package Your::Model;
    
        use DBIx::Skinny setup => +{
            dsn => 'dbi:SQLite:',
            username => '',
            password => '',
        };
    
        use DBIx::Skinny::Mixin modules => [ qw(DBICTic) ];
    
        package main;
    
        my $skinny = Your::Model->new;
    
        my $rs = $skinny->resultset_dbictic( 'user',
            { 'user.id' => 1 },
            {
                'join'    => [ 'profiles' ],
                '+select' => [ qw( profiles.name profiles.value ) ],
                '+as'     => [ qw( prof_name prof_value ) ],
            }
        );
    
        my $itr = $rs->retrieve;
    
        $rs = $skinny->resultset_dbictic( 'user',
            undef,
            {
                order_by => 'id DESC',
                page     => 1,
                rows     => 10,
            }
        );
    
        $itr = $rs->retrieve;
    
        my $pager = $itr->pager;

DESCRIPTION
    DBIx::Class-like features for DBIx::Skinny

SCHEMA FEATURE
    In your schema class, you can use below functions.

  relationship
      relationship $join_name, { table => $table, condition => $cond, type => $type };

    $join_name is used by "resultset_dbictic"'s join attribute. $table is a
    joining table name. $cond is a condition and $type is a join type. See
    DBIx::Skinny::Resultset.

    for example:

        install_table 'some_table' => schema {
            pk 'id';
            columns qw/id name /;
            relationship 'a_relation'
                        => 'other_table' => {
                            condition => 'some_table.id = other_table.id',
                            type => 'inner',
                        };
        };

  has_one
      has_one $join_name, $table, $condtion;

    A wrapper of "relationship". $join_name is used by "resultset_dbictic"'s
    join attribute. $table is a joining table name. $cond is a condition.

    for example:

        install_table 'some_table' => schema {
            pk 'id';
            columns qw/id name /;
            has_one 'has_one_relation' => 'other_table' => 'some_table.id = other_table.id';
        };

  might_have
      might_have $join_name, $table, $condtion;

    A wrapper of "relationship". $join_name is used by "resultset_dbictic"'s
    join attribute. $table is a joining table name. $cond is a condition.

    for example:

        install_table 'some_table' => schema {
            pk 'id';
            columns qw/id name /;
            might_have 'might_have_relation' => 'other_table' => 'some_table.id = other_table.id';
        };

  has_many
      has_many $join_name, $table, $condtion;

    A wrapper of "relationship". $join_name is used by "resultset_dbictic"'s
    join attribute. $table is a joining table name. $cond is a condition.

    for example:

        install_table 'some_table' => schema {
            pk 'id';
            columns qw/id name /;
            has_many 'has_many_relation' => 'other_table' => 'some_table.id = other_table.id';
        };

  belongs_to
      belongs_to $join_name, $table, $condtion;

    A wrapper of "relationship". $join_name is used by "resultset_dbictic"'s
    join attribute. $table is a joining table name. $cond is a condition.

    for example:

        install_table 'some_table' => schema {
            pk 'id';
            columns qw/id name /;
            has_one 'belongs_to_relation' => 'other_table' => 'some_table.id = other_table.id';
        };

SKINNY METHOD
    In your model class, you can call "DBICTic" as mixin module.

        package Your::Model;
        use DBIx::Skinny;
        use DBIx::Skinny::Mixin modules => [ qw(DBICTic) ];

  resultset_dbictic
      $rs = $skinny->resultset_dbictic( $table, $where, $attr );

    DBIx::Class::Resultset-like interface. $table is a table you need.
    $where is a condition. If you set "use_sql_abstract", the $where is
    applied to SQL::Abstract. $attr is attributes. See "RESULTSET
    ATTRIBUTES" for available attributes.

    It returns DBIx::Skiny::SQL::DBICTic object which inherits
    DBIx::Skiny::SQL.

    If "page" and "rows" are specified, an iterator returned by $rs has
    "pager" method. it returns Data::Page object.

      $rs  = $skinny->resultset_dbictic( $table, {}, { page => 2, rows => 10 } );
      $itr = $rs->retrieve.
      $pager = $itr->pager; # Data::Page object

RESULTSET ATTRIBUTES
  join
      join => $listref

    Names specified by relationship (or its wrapper) in your schema class.

    It can accept nested join relations.

      'join' => [ { 'book' => 'author' } ]

  select
      select => $listref

    Column names want to select.

      'select' => [ 'user_id', 'user_name' ],

  as
      as => $listref

    Alias names of columns specified by "select".

      'as' => [ 'id', 'name' ],

  +select
      +select => $listref

    Adding column names.

      '+select' => [ 'author.name' ],

  +as
      +as => $listref

    Alias names of columns specified by "+select".

      '+as' => [ 'author_name' ],

  order_by
      order_by => $scalar

    order by clause.

      'order_by' => 'id DESC'

  limit
      limit => $number

    limit number.

  page
      page => $number

    A page number. it must be used with "rows" attributes.

  rows
      rows => $number

    A number in one page.

  group_by
      group_by => $listref

    group by clause.

      group_by => [ 'id' ],

  having
      having => $hashref
      having => $arrayref

    having clause.

  count_subref
      count_subref => sub {
          my $sql = shift;
          return ( $str, $column );
      }

    A subroutine reference which returns a SQL statement and a column when
    "page" and "rows" attributes is set.

    This subroutine takes a SQL statement (returned by as_sql) and must
    return a SQL statement for count and its count column.

    Default by:

        sub {
            my $str = $_[0];
            $str =~ s{^\s*SELECT\s+(?:.+?)\s+FROM}{SELECT COUNT(*) FROM}i;
            return ( $str, 'COUNT(*)' );
        };

    If using group_by attribute:

        sub {
            my $str = $_[0];
            my $column =  sprintf( 'COUNT(DISTINCT(%s))', join( ',', @{ $attr->{ group_by } } ) );
            $str =~ s{^\s*SELECT\s+(?:.+?)\s+FROM}{SELECT $column FROM}i;
            $str =~ s{GROUP\s+BY\s+(?:[.\w]+,?\s*){1,}}{}i;
            return ( $str, $column );
        };

    For example;

        'count_subref' => sub {
            my $sql = $_[0];
            sprintf( 'SELECT count(*) AS count_num FROM ( %s ) AS subquery', $sql ), 'count_num';
        }

    This counter subroutine will be called when the resultset object use
    "retrieve" method.

  use_sql_abstract
      use_sql_abstract => $bool

    If set ture, $where and "having" are applied to SQL::Abstract.

SEE ALSO
    DBIx::Skinny, DBIx::Class::Resultset, SQL::Abstract

AUTHOR
    Makamaka Hannyaharamitu, <makamaka[at]cpan.org>

COPYRIGHT AND LICENSE
    Copyright 2010 by Makamaka Hannyaharamitu

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

